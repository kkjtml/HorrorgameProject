using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class RaycastInteractor : MonoBehaviour
{
    public float interactRange = 3.5f;
    public LayerMask interactLayer;
    public Transform rayOriginFromPlayer;
    private IInteractable currentTarget;
    private IInteractable previousTarget;

    void Update()
    {
        if (Camera.main == null) return;

        List<Ray> rays = new List<Ray>();

        // üîÅ ‡∏¢‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        rays.Add(Camera.main.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0f)));
        rays.Add(Camera.main.ViewportPointToRay(new Vector3(0.5f, 0.4f, 0f)));

        // üßç ‡∏¢‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
        if (rayOriginFromPlayer != null)
        {
            rays.Add(new Ray(rayOriginFromPlayer.position, Camera.main.transform.forward));
        }

        float closestDistance = float.MaxValue;
        IInteractable bestHit = null;

        foreach (Ray ray in rays)
        {
            RaycastHit[] hits = Physics.RaycastAll(ray, interactRange, interactLayer);
            System.Array.Sort(hits, (a, b) => a.distance.CompareTo(b.distance));

            foreach (RaycastHit hit in hits)
            {
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà Block ‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (Physics.Raycast(ray.origin, ray.direction, out RaycastHit blockCheckHit, hit.distance, ~interactLayer))
                {
                    // ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
                    break;
                }

                IInteractable interactable = hit.collider.GetComponentInParent<IInteractable>();
                if (interactable != null && interactable.CanBeInteracted() && hit.distance < closestDistance)
                {
                    bestHit = interactable;
                    closestDistance = hit.distance;
                    break; // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ interactable ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ
                }
            }
            Debug.DrawRay(ray.origin, ray.direction * interactRange, Color.green);
        }

        if (bestHit != null)
        {
            if (bestHit != currentTarget)
            {
                previousTarget?.SetHighlighted(false);

                currentTarget = bestHit;

                if (currentTarget.CanBeInteracted())
                    currentTarget.SetHighlighted(true);

                previousTarget = currentTarget;
            }

            if (!InspectManager.Instance.IsInspecting())
            {
                if (Mouse.current?.leftButton.wasPressedThisFrame == true ||
                    Gamepad.current?.buttonSouth.wasPressedThisFrame == true)
                {
                    currentTarget.Interact();
                }
            }
        }
        else
        {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‚Üí ‡∏õ‡∏¥‡∏î glow ‡∏≠‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            previousTarget?.SetHighlighted(false);
            currentTarget = null;
            previousTarget = null;
        }

    }
}