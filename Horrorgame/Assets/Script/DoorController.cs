using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.AI;

public enum DoorUnlockCondition
{
    AfterLantern2,
    PuzzlePictureQuest,
    AfterFoundKey
}

public class DoorController : MonoBehaviour
{
    public Transform doorTransform;
    public Vector3 openRotationOffset = new Vector3(0, -90, 0);
    public float openSpeed = 2f;

    private bool isPlayerNearby = false;
    private bool isOpen = false;
    private bool isUnlocked = false;

    public DoorUnlockCondition unlockCondition;

    private Quaternion closedRotation; // Y = 90
    private Quaternion openRotation;   // Y = 0 (‡∏´‡∏£‡∏∑‡∏≠ 180 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    private Quaternion targetRotation;

    private bool hasAutoOpened = false;

    void Start()
    {
        closedRotation = doorTransform.localRotation;
        openRotation = Quaternion.Euler(closedRotation.eulerAngles + openRotationOffset);
        targetRotation = closedRotation;
    }

    void Update()
    {
        if (!isUnlocked)
        {
            switch (unlockCondition)
            {
                case DoorUnlockCondition.AfterLantern2:
                    if (LanternManager.Instance != null && LanternManager.Instance.nextLanternIndex > 1)
                    {
                        isUnlocked = true;
                        Debug.Log("‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ï‡∏∞‡πÄ‡∏Å‡∏µ‡∏¢‡∏á‡∏î‡∏ß‡∏á‡∏ó‡∏µ‡πà 2 ‡πÅ‡∏•‡πâ‡∏ß");
                    }
                    break;

                case DoorUnlockCondition.PuzzlePictureQuest:
                    if (QuestManager.Instance != null && QuestManager.Instance.IsSearchingOppositeRoom())
                    {
                        isUnlocked = true;
                        Debug.Log("‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß");
                    }
                    break;

                case DoorUnlockCondition.AfterFoundKey:
                    if (QuestManager.Instance != null && QuestManager.Instance.HasFoundKey())
                    {
                        isUnlocked = true;
                        Debug.Log("‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏û‡∏ö‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡πÅ‡∏•‡πâ‡∏ß");
                    }
                    break;
            }
        }

        if (isUnlocked && !hasAutoOpened)
        {
            // ‡πÅ‡∏á‡πâ‡∏° 30 ‡∏≠‡∏á‡∏®‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            Quaternion slightlyOpen = Quaternion.Euler(closedRotation.eulerAngles + new Vector3(0, openRotationOffset.y * 0.33f, 0));
            targetRotation = slightlyOpen;
            hasAutoOpened = true;
        }

        // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Mouse Left Click ‡∏´‡∏£‡∏∑‡∏≠ Gamepad Button South (A / X)
        bool mousePressed = Mouse.current != null && Mouse.current.leftButton.wasPressedThisFrame;
        bool gamepadPressed = Gamepad.current != null && Gamepad.current.buttonSouth.wasPressedThisFrame;

        if (isUnlocked && isPlayerNearby && (mousePressed || gamepadPressed))
        {
            ToggleDoor();

            if (unlockCondition == DoorUnlockCondition.AfterFoundKey)
            {
                DialogueManager.Instance?.Show("‡∏â‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß", 2f);

                // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏ß‡∏™
                QuestManager.Instance?.SetEscapeForestQuest();
            }
        }
        else if (isPlayerNearby && (mousePressed || gamepadPressed))
        {
            DialogueManager.Instance?.Show("‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏•‡πá‡∏≠‡∏Ñ ‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", 1f);
        }

        doorTransform.localRotation = Quaternion.Slerp(
            doorTransform.localRotation, targetRotation, Time.deltaTime * openSpeed);
    }

    void ToggleDoor()
    {
        isOpen = !isOpen;
        targetRotation = isOpen ? openRotation : closedRotation;

        Debug.Log("üåÄ Door toggled to: " + (isOpen ? "OPEN" : "CLOSED"));
    }

    public void SetPlayerNearby(bool state)
    {
        isPlayerNearby = state;
    }

    public void UnlockManually()
    {
        isUnlocked = true;
        Debug.Log("üîì ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏∏‡∏ç‡πÅ‡∏à inspect");
    }

    public bool IsOpen() => isOpen;
    public void OpenByGhost()
    {
        if (!isOpen)
        {
            isOpen = true;
            targetRotation = openRotation;

            Debug.Log("üëª ‡∏ú‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π");
        }
    }

    public void CloseByGhost()
    {
        if (isOpen)
        {
            isOpen = false;
            targetRotation = closedRotation;
            Debug.Log("üö™ ‡∏ú‡∏µ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π");
        }
    }

    public bool IsUnlocked() => isUnlocked;

    // public void DisableObstacle()
    // {
    //     if (navObstacle != null)
    //     {
    //         navObstacle.enabled = false;
    //         navObstacle.carving = false;
    //         Debug.Log("üö™ Obstacle ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏µ");
    //     }

    //     if (doorBlocker != null)
    //     {
    //         doorBlocker.SetActive(false); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß block ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    //     }
    // }

}