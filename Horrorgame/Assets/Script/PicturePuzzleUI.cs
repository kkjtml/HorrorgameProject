using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.InputSystem;

public enum PictureType
{
    Skull,
    Crown,
    intestine
}
public class PicturePuzzleUI : MonoBehaviour
{
    public static PicturePuzzleUI Instance;

    public GameObject uiPanel;
    public Image[] pictureSlots;
    public PictureData[] pictureOptions;

    private int[] currentIndices = new int[3]; // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
    private float[] currentRotations = new float[3]; // ‡πÄ‡∏Å‡πá‡∏ö rotation ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
    public PictureType[] correctOrder = { PictureType.Skull, PictureType.Crown, PictureType.intestine };

    private int selectedSlot = 0; // üü¶ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
    private bool hasInitialized = false;

    private bool puzzleCompleted = false;
    public bool IsPuzzleCompleted() => puzzleCompleted;

    private StarterAssets.ThirdPersonController player;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }
    void Update()
    {
        if (!uiPanel.activeInHierarchy) return;

        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤/‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if (Keyboard.current.qKey.wasPressedThisFrame)
            selectedSlot = Mathf.Max(0, selectedSlot - 1);

        if (Keyboard.current.eKey.wasPressedThisFrame)
            selectedSlot = Mathf.Min(2, selectedSlot + 1);

        // ‡∏´‡∏°‡∏∏‡∏ô
        if (Keyboard.current.rKey.wasPressedThisFrame)
        {
            // ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 90 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô 270
            currentRotations[selectedSlot] = (currentRotations[selectedSlot] + 90f) % 360f;
            UpdateSlots();
        }

        // ‡∏™‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û
        if (Keyboard.current.aKey.wasPressedThisFrame)
            SwapLeft(selectedSlot);

        if (Keyboard.current.dKey.wasPressedThisFrame)
            SwapRight(selectedSlot);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        if (Keyboard.current.spaceKey.wasPressedThisFrame)
            CheckAnswer();

        // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å puzzle
        if (Mouse.current.rightButton.wasPressedThisFrame)
            ClosePuzzle();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏ö/‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á selectedSlot)
        HighlightSelectedSlot();
    }

    private void HighlightSelectedSlot()
    {
        for (int i = 0; i < pictureSlots.Length; i++)
        {
            pictureSlots[i].color = (i == selectedSlot) ? Color.yellow : Color.white;
        }
    }

    public void OpenPuzzle()
    {
        uiPanel.SetActive(true);
        Time.timeScale = 0f;
        selectedSlot = 0;

        // üîí ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        if (player == null)
            player = FindObjectOfType<StarterAssets.ThirdPersonController>();

        if (player != null)
            player.enabled = false;

        // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (!hasInitialized)
        {
            List<int> indices = new List<int> { 0, 1, 2 };
            for (int i = 0; i < 3; i++)
            {
                int rand = Random.Range(0, indices.Count);
                currentIndices[i] = indices[rand];
                indices.RemoveAt(rand);
            }

            // reset rotation ‡∏î‡πâ‡∏ß‡∏¢
            for (int i = 0; i < 3; i++)
                currentRotations[i] = 0f;

            hasInitialized = true;
        }

        UpdateSlots();
    }

    public void ClosePuzzle()
    {
        uiPanel.SetActive(false);
        Time.timeScale = 1f;

        // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (player == null)
            player = FindObjectOfType<StarterAssets.ThirdPersonController>();

        if (player != null)
            player.enabled = true;
    }

    public void NextImage(int slotIndex)
    {
        currentIndices[slotIndex] = (currentIndices[slotIndex] + 1) % pictureOptions.Length;
        UpdateSlots();
    }

    private void UpdateSlots()
    {
        for (int i = 0; i < pictureSlots.Length; i++)
        {
            int optionIndex = currentIndices[i];
            pictureSlots[i].sprite = pictureOptions[optionIndex].sprite;

            // üåÄ ‡∏´‡∏°‡∏∏‡∏ô UI ‡∏ï‡∏≤‡∏° currentRotations
            pictureSlots[i].rectTransform.localEulerAngles = new Vector3(0, 0, currentRotations[i]);
        }

        for (int i = 0; i < 3; i++)
        {
            Debug.Log($"Slot {i} showing: {pictureOptions[currentIndices[i]].type} rot={currentRotations[i]}¬∞");
        }
    }

    public void SwapLeft(int index)
    {
        if (index > 0)
        {
            int temp = currentIndices[index];
            currentIndices[index] = currentIndices[index - 1];
            currentIndices[index - 1] = temp;
            UpdateSlots();
        }
    }

    public void SwapRight(int index)
    {
        if (index < currentIndices.Length - 1)
        {
            int temp = currentIndices[index];
            currentIndices[index] = currentIndices[index + 1];
            currentIndices[index + 1] = temp;
            UpdateSlots();
        }
    }

    public void CheckAnswer()
    {
        bool correct = true;

        Debug.Log("‚úÖ Correct order:");
        for (int i = 0; i < 3; i++)
        {
            Debug.Log($"Correct[{i}] = {correctOrder[i]}");
        }

        for (int i = 0; i < 3; i++)
        {
            PictureData data = pictureOptions[currentIndices[i]];
            float expectedRotation = data.correctRotation;
            float actualRotation = currentRotations[i];

            bool rotationCorrect = Mathf.Approximately(expectedRotation, actualRotation);
            bool typeCorrect = data.type == correctOrder[i];

            if (!typeCorrect || !rotationCorrect)
            {
                correct = false;
                break;
            }
        }

        if (correct)
        {
            DialogueManager.Instance.Show("‡∏°‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß...", 2f);
            ClosePuzzle();
            puzzleCompleted = true; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            Invoke(nameof(ShowClue3AfterDelay), 2f); // ‚úÖ ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡∏ß‡∏¥
        }
        else
        {
            DialogueManager.Instance.Show("‡∏¢‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å...", 2f);
        }
    }

    void ShowClue3AfterDelay()
    {
        ClueNoteManager.Instance?.ShowClue(2);
    }

}